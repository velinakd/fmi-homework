public class Node {
	private int[][] board;

	public int evaluate() {
		int emptySlots = emptyCount();
		int winner = findWinner();
		if(winner == 1) {
			return emptySlots + 1;
		} else if (winner == 2) {
			return -1 - emptySlots;
		} else {
			return 0;
		}
	}

	public boolean isValid(int move) {
		int x = move / 3;
		int y = move % 3;
		return board[x][y] == 0;
	}
	
	public void doMove(int move, int player) {
		int x = move / 3;
		int y = move % 3;
		board[x][y] = player;
	}
	
	public void revertMove(int move) {
		int x = move / 3;
		int y = move % 3;
		board[x][y] = 0;
	}
	
	private int emptyCount() {
		int count = 0;
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (board[i][j] == 0)
					count++;
			}
		}
		return count;
	}

	private int findWinner() {
		for (int i = 0; i < 3; i++) {
			if (board[i][0] != 0 && board[i][0] == board[i][1]
					&& board[i][1] == board[i][2])
				return board[i][0];
			if (board[0][i] != 0 && board[0][i] == board[1][i]
					&& board[1][i] == board[2][i])
				return board[0][i];
		}
		if (board[1][1] != 0
				&& ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) || (board[0][2] == board[1][1] && board[1][1] == board[2][0])))
			return board[1][1];
		return 0;
	}

	public boolean isFinal() {
		if (findWinner() != 0)
			return true;
		if (emptyCount() == 0)
			return true;
		return false;
	}
}
