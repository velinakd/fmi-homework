package bg.unisofia.fmi.ai.nqueens;

import java.lang.Math;

public class NQueens {
	private int n;
	private double MAX_ITER;
	private int[] queens;
	
	public NQueens(int n) {
		this.n = n;
		queens = new int[n];
		MAX_ITER = Math.sqrt(n);
	}
	
	private void initializePositions() {
		for(int i=0; i<n; i++) {
			queens[i] = (int)(Math.random() * (n-1)) + 1;
		}
	}
	
	private boolean inConflict(int x, int y) {
		if(x == y)
			return false;
		if(queens[x] == queens[y] || 
				(x - queens[x]) == (y - queens[y]) ||
				(x + queens[x]) == (y + queens[y]))
			return true;
		return false;
	}
	
	private int numberOfConflicts(int x) {
		int number = 0;
		for(int i=0; i<n; i++) {
			if(inConflict(x, i))
				number++;
		}
		return number;
	}
	
	private int minConflicts(int x) {
		int min = 0;
		int minCount = 0;
		int currentCount = 0;
		int[] q = new int[n];
		for(int i=0; i<n; i++) {
			q[i] = queens[i];
		}
		
		for (int j=0; j<n; j++) {
			q[x] = j;
			currentCount = numberOfConflicts(x);
			if (minCount > currentCount) {
				minCount = currentCount;
				min = j;
			}
		}
		return min;
	}
	
	private boolean isSolution() {
		for(int i=0; i<n; i++) {
			if(numberOfConflicts(i) != 0)
				return false;
		}
		return true;
	}
	
	public void findSolution() {
		int i=0;
		int k=0;
		initializePositions();
		while(k <= MAX_ITER) {
			i = (int)(Math.random() * (n-1));
			queens[i] = minConflicts(i);
			if(isSolution()) {
				System.out.print("[");
				for(int j=0; j < n - 1; j++) {
					System.out.print(queens[j] + ", ");
				}
				System.out.println(queens[n-1] + "]");
				return;
			}
			k++;
		}
		findSolution();
	}
	
	public static void main(String[] args) {
		NQueens nq = new NQueens(5);
		nq.findSolution();
	}
}
